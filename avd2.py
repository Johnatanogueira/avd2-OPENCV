# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h1q1Wt2D6C5bmGjyDuAbU_VBLhwJb9E5
"""

from PIL import Image
import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow
import dlib

# Carrega o detector de faces da dlib. Não precisamos passar o arquivo do detector (poderíamos opcionalmente), 
# já que nesse caso o detector de faces padrão vem adicionado na biblioteca:


detector_face = dlib.get_frontal_face_detector()

imagem = cv.imread('jovens.png')
deteccoes = detector_face(imagem, 1)
for face in deteccoes:
  l, t, r, b = face.left(), face.top(), face.right(), face.bottom()
  cv.rectangle(imagem, (l,t), (r, b), (255,0,0), 2)


cv2_imshow(imagem)

# Carrega o detector de marcos faciais da dlib:
detector_pontos = dlib.shape_predictor('shape_predictor_5_face_landmarks.dat')

# Agora vamos ver os marcos (landmarks) faciais das faces da imagem que carregamos anteriormente:
imagem2 = cv.imread('jovens.png')

# Detectamos os retângulos encontrados na imagem e armazenamos no vetor "deteccoes":
deteccoes = detector_face(imagem2, 1)
for face in deteccoes:
  # Para cada detecção (retângulo de uma face encontrada), encontramos os marcos faciais e armazenamos no vetor "pontos":
  pontos = detector_pontos(imagem2, face)
  # Agora desenhamos cada marco facial de cada face encontrada na imagem.
  # Repare como os marcos faciais contornam boca, olhos, nariz, sobrancelha e rosto:
  for ponto in pontos.parts():
    cv.circle(imagem2, (ponto.x, ponto.y), 4, (0,0,255), 4)

  # No final desenhamos os retângulos. Caso desenhássemos antes, apagaríamos pixels das faces
  # e prejudicaríamos o detector de marcos faciais:
  l, t, r, b = face.left(), face.top(), face.right(), face.bottom()
  cv.rectangle(imagem2, (l,t), (r, b), (255,0,0), 2)


cv2_imshow(imagem2)

# Carrega o detector de faces da dlib. Não precisamos passar o arquivo do detector (poderíamos opcionalmente), 
# já que nesse caso o detector de faces padrão vem adicionado na biblioteca:
detector_face = dlib.get_frontal_face_detector()

deteccoes = detector_face(imagem, 1)
for face in deteccoes:
  l, t, r, b = face.left(), face.top(), face.right(), face.bottom()
  # cv2.rectangle(imagem, (l,t), (r, b), (0,255,0), 2)

  cv.circle(imagem, ((l+r)//2, (t+b)//2), (r-l)//2, (0,255,0))

cv2_imshow(imagem)